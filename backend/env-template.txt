# ===================================================================
# PatchlineAI Environment Variables Template
# ===================================================================
# Copy this file to .env.local in the project root and fill in your values
# After creating .env.local, restart your development server!

# ===== AWS CONFIGURATION =====
# Required: Your AWS credentials for DynamoDB and Bedrock access
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your_access_key_here
AWS_SECRET_ACCESS_KEY=your_secret_key_here

# Optional: Only needed for temporary credentials (AWS SSO, etc.)
# AWS_SESSION_TOKEN=your_session_token_here

# Alternative AWS variable names (for Amplify compatibility)
# REGION_AWS=us-east-1
# ACCESS_KEY_ID=your_access_key_here
# SECRET_ACCESS_KEY=your_secret_key_here

# ===== DYNAMODB TABLES =====
# Primary table names (used by most of the application)
USERS_TABLE=Users-staging
EMBEDS_TABLE=Embeds-staging
BLOG_POSTS_TABLE=BlogPosts-staging
CONTENT_DRAFTS_TABLE=ContentDrafts-staging

# Alternative table name format (for Amplify environments)
DYNAMODB_USERS_TABLE=Users-staging
DYNAMODB_EMBEDS_TABLE=Embeds-staging
DYNAMODB_CONTENT_TABLE=ContentDrafts-staging

# ===== AWS BEDROCK (AI CONTENT GENERATION) =====
# Default model (fastest, cheapest)
BEDROCK_MODEL_ID=amazon.nova-micro-v1:0

# Alternative models (uncomment to use):
# BEDROCK_MODEL_ID=anthropic.claude-3-haiku-20240307-v1:0    # Better quality
# BEDROCK_MODEL_ID=anthropic.claude-3-sonnet-20240229-v1:0   # Highest quality
# BEDROCK_MODEL_ID=amazon.titan-text-lite-v1:0               # Amazon's model
# BEDROCK_MODEL_ID=cohere.command-text-v14:0                 # Cohere's model

# Custom system prompt for content generation (optional)
# SYSTEM_PROMPT=You are a helpful AI assistant for music industry content creation.

# ===== APPLICATION CONFIGURATION =====
# Environment mode
NODE_ENV=development
NEXT_PUBLIC_DEVELOPMENT_MODE=true

# ===== BACKEND API CONFIGURATION =====
# Backend API URL (for frontend to connect to backend)
API_BASE_URL=http://localhost:3001

# JWT secret for development authentication
JWT_SECRET=your_jwt_secret_for_development_change_this_in_production

# Backend server port
PORT=3001

# ===== FEATURE FLAGS =====
# Authentication (set to false for development)
AUTH_ENABLED=false

# Analytics tracking
ENABLE_ANALYTICS=false

# Mock services for development
ENABLE_MOCK_SERVICES=true

# ===== SOUNDCHARTS API CONFIGURATION =====
# Soundcharts API credentials for Scout agent
SOUNDCHARTS_APP_ID=PATCHLINE_A2F4F819
SOUNDCHARTS_API_KEY=d8e39c775adc8797
SOUNDCHARTS_API_URL=https://customer.api.soundcharts.com

# ===== AWS AMPLIFY CONFIGURATION =====
# These are automatically set by Amplify, but can be overridden for local development
AWS_APP_ID=d40rmftf5h7p7
AWS_BRANCH=staging

# Amplify execution environment (automatically set by Amplify)
# AWS_EXECUTION_ENV=AWS_Lambda_nodejs18.x

# ===== OPTIONAL CONFIGURATION =====
# Custom configuration overrides (uncomment if needed)

# Custom AWS endpoint (for local DynamoDB testing)
# AWS_ENDPOINT_URL=http://localhost:8000

# Custom Bedrock endpoint
# BEDROCK_ENDPOINT_URL=https://bedrock-runtime.us-east-1.amazonaws.com

# Debug logging
# DEBUG=true
# LOG_LEVEL=debug

# ===================================================================
# SETUP INSTRUCTIONS:
# ===================================================================
# 1. Copy this file to .env.local in the project root
# 2. Replace all "your_*_here" values with your actual credentials
# 3. Restart your development server (pnpm dev)
# 4. Run: node check-aws-credentials.mjs to verify setup
# 5. Test the application at http://localhost:3000
#
# For production deployment:
# - Set these same variables in your Amplify Console
# - Use production table names (e.g., Users-prod instead of Users-staging)
# - Set AUTH_ENABLED=true for production
# - Use a secure JWT_SECRET for production
# =================================================================== 